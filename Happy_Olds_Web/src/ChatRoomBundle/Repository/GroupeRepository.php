<?php

namespace ChatRoomBundle\Repository;
use ChatRoomBundle\Utils\GroupeTypes;

/**
 * GroupeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupeRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllAccessible($user_id)
    {
        //return $this->findAll();
        $query=$this->getEntityManager()
            ->createQuery("SELECT g FROM ChatRoomBundle:Groupe g "
                ."LEFT JOIN g.members m "
                ."WHERE (m.banned != 1 AND g.type in ('private', 'public')) "
                ."OR (m.banned != 1 AND m.user = :member) "
                ."OR g.creator = :member ")
            ->setParameter(':member',$user_id);
        return $query->getResult();
    }

    public function findAllMineAccessible($user_id)
    {
        //return $this->findAll();
        $query=$this->getEntityManager()
            ->createQuery("SELECT g FROM ChatRoomBundle:Groupe g "
                ."WHERE g.creator = :member ")
            ->setParameter(':member',$user_id);
        return $query->getResult();
    }

    public function consult($groupe_id,$user_id)
    {
        $query=$this->getEntityManager()
            ->createQuery("SELECT g FROM ChatRoomBundle:Groupe g "
                ."LEFT JOIN g.members m "
                ."WHERE g.id = :groupe "
                ."AND (".
                    "(m.banned != 1 AND g.type in ('private', 'public')) "
                    ."OR (m.banned != 1 AND m.user = :member) "
                    ."OR g.creator = :member "
                .")")
            ->setParameter(':member',$user_id)
            ->setParameter(':groupe', $groupe_id);
        return $query->getOneOrNullResult();
    }

    public function findAllAsMember($user_id)
    {
        //return $this->findAll();
        $query=$this->getEntityManager()
            ->createQuery("SELECT g FROM ChatRoomBundle:Groupe g "
                ."LEFT JOIN g.members m "
                ."WHERE ((:member = m.user AND m.banned != 1) "
                ."OR :member = g.creator")
            ->setParameter(':member',$user_id);
        return $query->getResult();
    }

    public function findAccessible($user_id, $group_id)
    {
        $query=$this->getEntityManager()
            ->createQuery("SELECT g FROM ChatRoomBundle:Groupe g "
                ."LEFT JOIN g.members m "
                ."WHERE ((:member = m.user and m.banned != 1) "
                ."      OR :member = g.creator) "
                ."AND g.id = :id")
            ->setParameter(':member', $user_id)
            ->setParameter(':id', $group_id);
        return $query->getResult();
    }

    public function checkIfAuthorizedToInvite($groupe_id, $member_id)
    {
        $query = $this->getEntityManager()
            ->createQuery("SELECT count(1) as result from ChatRoomBundle:Groupe g "
                ."WHERE g.creator = :member "
                ."AND g.id = :groupe ")
            ->setParameter(":member",$member_id)
            ->setParameter(":groupe",$groupe_id);
        return $query->getOneOrNullResult()["result"] > 0;
    }

    public function checkIfAuthorizedToJoin($groupe_id, $user_id)
    {
        $query = $this->getEntityManager()
            ->createQuery("SELECT count(1) as result from ChatRoomBundle:Groupe g "
                ."WHERE :member NOT IN ( "
                    ."SELECT u.id from ChatRoomBundle:MembreGroupe m2 "
                    ."LEFT JOIN m2.user u "
                    ."WHERE m2.groupe = :groupe "
                .") "
                ."AND g.id = :groupe "
                ."AND g.type in ('private','public')")
            ->setParameter(":member",$user_id)
            ->setParameter(":groupe",$groupe_id);
        return $query->getOneOrNullResult()["result"] > 0;
    }

    public function checkIfAuthorizedToLeave($groupe_id, $user_id)
    {
        $query = $this->getEntityManager()
            ->createQuery("SELECT count(1) as result from ChatRoomBundle:Groupe g "
                ."WHERE :member IN ( "
                    ."SELECT u.id from ChatRoomBundle:MembreGroupe m2 "
                    ."LEFT JOIN m2.user u "
                    ."WHERE m2.groupe = :groupe "
                    ."AND m2.authorized = 1 "
                    ."ANd m2.banned != 1 "
                .") "
                ."AND g.id = :groupe "
                ."AND g.creator != :member")
            ->setParameter(":member",$user_id)
            ->setParameter(":groupe",$groupe_id);
        return $query->getOneOrNullResult()["result"] > 0;
    }
}
